/*
 * Copyright Â© 2016 TCS and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.cardinal.impl;
//

// Generated by mibgen version 5.1 (03/08/07) when compiling ODL-CARDINAL-MIB.
//

// java imports
//
import java.io.Serializable;
import java.util.Vector;

// jmx imports
//
import javax.management.MBeanServer;
import javax.management.ObjectName;
import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpCounter64;
import com.sun.management.snmp.SnmpGauge;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpUnsignedInt;
import com.sun.management.snmp.SnmpIpAddress;
import com.sun.management.snmp.SnmpTimeticks;
import com.sun.management.snmp.SnmpOpaque;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStringFixed;
import com.sun.management.snmp.SnmpOid;
import com.sun.management.snmp.SnmpNull;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.SnmpVarBind;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpIndex;
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpTableEntryFactory;
import com.sun.management.snmp.agent.SnmpTableCallbackHandler;
import com.sun.management.snmp.agent.SnmpTableSupport;

/**
 * The class is used for implementing the "OdlNetconfTable" group. The group is
 * defined with the following oid: 1.3.6.1.3.1.1.16.1.
 */
public class TableOdlNetconfTable extends SnmpTableSupport implements Serializable {

    /**
     * Constructor for the table. Initialize metadata for
     * "TableOdlNetconfTable". The reference on the MBean server is not updated
     * so the entries created through an SNMP SET will not be registered in Java
     * DMK.
     */
    public TableOdlNetconfTable(SnmpMib myMib) {
        super(myMib);
    }

    /**
     * Constructor for the table. Initialize metadata for
     * "TableOdlNetconfTable". The reference on the MBean server is updated so
     * the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED
     * in Java DMK.
     */
    public TableOdlNetconfTable(SnmpMib myMib, MBeanServer server) {
        this(myMib);
        this.server = server;
    }

    // ------------------------------------------------------------
    //
    // Implements the "createNewEntry" method defined in "SnmpTableSupport".
    // See the "SnmpTableSupport" Javadoc API for more details.
    //
    // ------------------------------------------------------------

    public void createNewEntry(SnmpMibSubRequest req, SnmpOid rowOid, int depth, SnmpMibTable meta)
            throws SnmpStatusException {
        final SnmpIndex index = buildSnmpIndex(rowOid);
        final Vector v = index.getComponents();
        SnmpOid oid;
        try {
            final SnmpOid oid0 = (SnmpOid) v.elementAt(0);
            ObjectName objname = null;
            if (server != null)
                objname = buildNameFromIndex(index);

            // Note that when using standard metadata,
            // the returned object must implement the "OdlNetconfEntryMBean"
            // interface.
            //
            final Object entry = createOdlNetconfEntryMBean(req, rowOid, depth, objname, meta, oid0.toByte());
            if (server != null) {
                server.registerMBean(entry, objname);
            }
            meta.addEntry(rowOid, objname, entry);
        } catch (SnmpStatusException e) {
            throw e;
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
        } catch (Exception e) {
            throw new SnmpStatusException(e.getMessage());
        }
    }

    // ------------------------------------------------------------
    //
    // Implements the "getRegisteredTableMeta" method defined in
    // "SnmpTableSupport".
    // See the "SnmpTableSupport" Javadoc API for more details.
    //
    // ------------------------------------------------------------

    protected SnmpMibTable getRegisteredTableMeta(SnmpMib mib) {
        return mib.getRegisteredTableMeta("OdlNetconfTable");
    }

    // ------------------------------------------------------------
    //
    // Implements the "removeEntryCb" method defined in "SnmpTableSupport".
    // See the "SnmpTableSupport" Javadoc API for more details.
    //
    // ------------------------------------------------------------

    public void removeEntryCb(int pos, SnmpOid row, ObjectName name, Object entry, SnmpMibTable meta)
            throws SnmpStatusException {
        try {
            super.removeEntryCb(pos, row, name, entry, meta);
            if (server != null && name != null)
                server.unregisterMBean(name);
        } catch (Exception x) {
        }
    }

    /**
     * Add a new entry to the table.
     *
     * If the associated metadata requires ObjectNames a new ObjectName will be
     * generated using "buildNameFromIndex".
     *
     * This method calls "addEntry" from "SnmpTableSupport". See the
     * "SnmpTableSupport" Javadoc API for more details.
     *
     **/

    public synchronized void addEntry(OdlNetconfEntryMBean entry) throws SnmpStatusException {
        SnmpIndex index = buildSnmpIndex(entry);
        super.addEntry(index, (Object) entry);
    }

    /**
     * Add a new entry to the table.
     *
     * This method calls "addEntry" from "SnmpTableSupport". See the
     * "SnmpTableSupport" Javadoc API for more details.
     *
     **/

    public synchronized void addEntry(OdlNetconfEntryMBean entry, ObjectName name) throws SnmpStatusException {
        SnmpIndex index = buildSnmpIndex(entry);
        super.addEntry(index, name, (Object) entry);
    }

    /**
     * Return the entries stored in the table.
     *
     * This method calls "getBasicEntries" from "SnmpTableSupport". See the
     * "SnmpTableSupport" Javadoc API for more details.
     *
     **/

    public synchronized OdlNetconfEntryMBean[] getEntries() {
        Object[] array = getBasicEntries();
        OdlNetconfEntryMBean[] result = new OdlNetconfEntryMBean[array.length];
        java.lang.System.arraycopy(array, 0, result, 0, array.length);
        return result;
    }

    /**
     * Remove the specified entry from the table.
     *
     * This method calls "removeEntry" from "SnmpTableSupport". See the
     * "SnmpTableSupport" Javadoc API for more details.
     *
     **/

    public void removeEntry(OdlNetconfEntryMBean entry) throws SnmpStatusException {
        SnmpIndex index = buildSnmpIndex(entry);
        super.removeEntry(index, entry);
    }

    // ------------------------------------------------------------
    //
    // Implements the "buildNameFromIndex" method defined in "SnmpTableSupport".
    // See the "SnmpTableSupport" Javadoc API for more details.
    //
    // ------------------------------------------------------------

    public ObjectName buildNameFromIndex(SnmpIndex index) throws SnmpStatusException {
        Vector v = index.getComponents();
        SnmpOid oid;
        try {
            oid = (SnmpOid) v.elementAt(0);
            String _keyOdlNetconfNodeId = oid.toByte().toString();
            return new ObjectName(
                    "TableOdlNetconfTable:name=OdlNetconfEntry" + ",OdlNetconfNodeId=" + _keyOdlNetconfNodeId);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
        } catch (Exception e) {
            throw new SnmpStatusException(e.getMessage());
        }
    }

    /**
     * Build index for "OdlNetconfEntry".
     */
    public SnmpIndex buildSnmpIndex(OdlNetconfEntryMBean entry) throws SnmpStatusException {
        SnmpOid[] oids = new SnmpOid[1];
        SnmpValue val = null;
        val = new SnmpString(entry.getOdlNetconfNodeId());
        oids[0] = val.toOid();
        return new SnmpIndex(oids);
    }

    /**
     * Build index for "OdlNetconfEntry".
     */
    public SnmpOid buildOidFromIndex(SnmpIndex index) throws SnmpStatusException {
        SnmpOid oid = new SnmpOid();
        if (index.getNbComponents() != 1)
            throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
        try {
            Vector v = index.getComponents();
            SnmpString.appendToOid((SnmpOid) v.elementAt(0), oid);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
        }
        return oid;
    }

    /**
     * Build index for "OdlNetconfEntry".
     */
    public SnmpOid buildOidFromIndexVal(Byte[] aOdlNetconfNodeId) throws SnmpStatusException {
        SnmpOid oid = new SnmpOid();
        try {
            SnmpString.appendToOid(new SnmpString(aOdlNetconfNodeId).toOid(), oid);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
        }
        return oid;
    }

    /**
     * Build index for "OdlNetconfEntry".
     */
    public SnmpIndex buildSnmpIndex(long[] index, int start) throws SnmpStatusException {
        SnmpOid[] oids = new SnmpOid[1];
        int pos = start;
        oids[0] = SnmpString.toOid(index, pos);
        return new SnmpIndex(oids);
    }

    /**
     * Factory method for "OdlNetconfEntry" entry MBean class.
     *
     * You can redefine this method if you need to replace the default generated
     * MBean class with your own customized class.
     *
     * @return An instance of the MBean class generated for the
     *         "OdlNetconfEntry" conceptual row.
     *
     *         Note that when using standard metadata, the returned object must
     *         implement the "OdlNetconfEntryMBean" interface.
     */

    public Object createOdlNetconfEntryMBean(SnmpMibSubRequest req, SnmpOid rowOid, int depth, ObjectName entryObjName,
            SnmpMibTable meta, Byte[] aOdlNetconfNodeId) throws SnmpStatusException {

        // Note that when using standard metadata,
        // the returned object must implement the "OdlNetconfEntryMBean"
        // interface.
        //
        OdlNetconfEntry entry = new OdlNetconfEntry(theMib);
        entry.OdlNetconfNodeId = aOdlNetconfNodeId;
        return entry;
    }

    /**
     * Reference to the MBean server.
     */
    protected MBeanServer server;

}
