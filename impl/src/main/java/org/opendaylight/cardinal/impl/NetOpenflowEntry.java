/*
 * Copyright Â© 2016 TCS and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.cardinal.impl;
//

// Generated by mibgen version 5.1 (03/08/07) when compiling ODL-CARDINAL-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "NetOpenflowEntry" group. The group is
 * defined with the following oid: 1.3.6.1.3.1.1.13.1.1.
 */
public class NetOpenflowEntry implements NetOpenflowEntryMBean, Serializable {

    /**
     * Variable for storing the value of "OdlNetOpenflowFlowstats". The variable
     * is identified by: "1.3.6.1.3.1.1.13.1.1.6".
     */
    protected String OdlNetOpenflowFlowstats = new String("flow");

    /**
     * Variable for storing the value of "OdlNetOpenflowManufacturer". The
     * variable is identified by: "1.3.6.1.3.1.1.13.1.1.5".
     */
    protected String OdlNetOpenflowManufacturer = new String("manu");

    /**
     * Variable for storing the value of "OdlNetOpenflowMacAddress". The
     * variable is identified by: "1.3.6.1.3.1.1.13.1.1.4".
     */
    protected String OdlNetOpenflowMacAddress = new String("address");

    /**
     * Variable for storing the value of "OdlNetOpenflowInterface". The variable
     * is identified by: "1.3.6.1.3.1.1.13.1.1.3".
     */
    protected String OdlNetOpenflowInterface = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "OdlNetOpenflowRowStatus". The variable
     * is identified by: "1.3.6.1.3.1.1.13.1.1.2".
     */
    protected String OdlNetOpenflowRowStatus = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "OdlNetOpenflowNode". The variable is
     * identified by: "1.3.6.1.3.1.1.13.1.1.1".
     */
    protected Byte[] OdlNetOpenflowNode = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75") };

    /**
     * Variable for storing the value of "OdlNetOpenflowMeterstats". The
     * variable is identified by: "1.3.6.1.3.1.1.13.1.1.7".
     */
    protected String OdlNetOpenflowMeterstats = new String("meter");

    /**
     * Constructor for the "NetOpenflowEntry" group.
     */
    public NetOpenflowEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "OdlNetOpenflowFlowstats" variable.
     */
    public String getOdlNetOpenflowFlowstats() throws SnmpStatusException {
        return OdlNetOpenflowFlowstats;
    }

    /**
     * Setter for the "OdlNetOpenflowFlowstats" variable.
     */
    public void setOdlNetOpenflowFlowstats(String x) throws SnmpStatusException {
        OdlNetOpenflowFlowstats = x;
    }

    /**
     * Checker for the "OdlNetOpenflowFlowstats" variable.
     */
    public void checkOdlNetOpenflowFlowstats(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "OdlNetOpenflowManufacturer" variable.
     */
    public String getOdlNetOpenflowManufacturer() throws SnmpStatusException {
        return OdlNetOpenflowManufacturer;
    }

    /**
     * Setter for the "OdlNetOpenflowManufacturer" variable.
     */
    public void setOdlNetOpenflowManufacturer(String x) throws SnmpStatusException {
        OdlNetOpenflowManufacturer = x;
    }

    /**
     * Checker for the "OdlNetOpenflowManufacturer" variable.
     */
    public void checkOdlNetOpenflowManufacturer(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "OdlNetOpenflowMacAddress" variable.
     */
    public String getOdlNetOpenflowMacAddress() throws SnmpStatusException {
        return OdlNetOpenflowMacAddress;
    }

    /**
     * Setter for the "OdlNetOpenflowMacAddress" variable.
     */
    public void setOdlNetOpenflowMacAddress(String x) throws SnmpStatusException {
        OdlNetOpenflowMacAddress = x;
    }

    /**
     * Checker for the "OdlNetOpenflowMacAddress" variable.
     */
    public void checkOdlNetOpenflowMacAddress(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "OdlNetOpenflowInterface" variable.
     */
    public String getOdlNetOpenflowInterface() throws SnmpStatusException {
        return OdlNetOpenflowInterface;
    }

    /**
     * Setter for the "OdlNetOpenflowInterface" variable.
     */
    public void setOdlNetOpenflowInterface(String x) throws SnmpStatusException {
        OdlNetOpenflowInterface = x;
    }

    /**
     * Checker for the "OdlNetOpenflowInterface" variable.
     */
    public void checkOdlNetOpenflowInterface(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "OdlNetOpenflowRowStatus" variable.
     */
    public String getOdlNetOpenflowRowStatus() throws SnmpStatusException {
        return OdlNetOpenflowRowStatus;
    }

    /**
     * Setter for the "OdlNetOpenflowRowStatus" variable.
     */
    public void setOdlNetOpenflowRowStatus(String x) throws SnmpStatusException {
        OdlNetOpenflowRowStatus = x;
    }

    /**
     * Checker for the "OdlNetOpenflowRowStatus" variable.
     */
    public void checkOdlNetOpenflowRowStatus(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "OdlNetOpenflowNode" variable.
     */
    public Byte[] getOdlNetOpenflowNode() throws SnmpStatusException {
        return OdlNetOpenflowNode;
    }

    /**
     * Setter for the "OdlNetOpenflowNode" variable.
     */
    public void setOdlNetOpenflowNode(Byte[] x) throws SnmpStatusException {
        OdlNetOpenflowNode = x;
    }

    /**
     * Checker for the "OdlNetOpenflowNode" variable.
     */
    public void checkOdlNetOpenflowNode(Byte[] x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "OdlNetOpenflowMeterstats" variable.
     */
    public String getOdlNetOpenflowMeterstats() throws SnmpStatusException {
        return OdlNetOpenflowMeterstats;
    }

    /**
     * Setter for the "OdlNetOpenflowMeterstats" variable.
     */
    public void setOdlNetOpenflowMeterstats(String x) throws SnmpStatusException {
        OdlNetOpenflowMeterstats = x;
    }

    /**
     * Checker for the "OdlNetOpenflowMeterstats" variable.
     */
    public void checkOdlNetOpenflowMeterstats(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

}
